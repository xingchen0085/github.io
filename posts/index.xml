<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Adiosy</title>
    <link>http://adiosy.com/posts.html</link>
    <description>Recent content in Posts on Adiosy</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 09 Mar 2023 14:34:07 +0800</lastBuildDate><atom:link href="http://adiosy.com/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Monado渲染流程</title>
      <link>http://adiosy.com/posts/01_monado%E6%B8%B2%E6%9F%93%E6%B5%81%E7%A8%8B.html</link>
      <pubDate>Thu, 09 Mar 2023 14:34:07 +0800</pubDate>
      
      <guid>http://adiosy.com/posts/01_monado%E6%B8%B2%E6%9F%93%E6%B5%81%E7%A8%8B.html</guid>
      <description>因为渲染流程和Session的生命周期息息相关，所以在进入渲染流程之前，先探讨Session的状态机变化流程。
1 Session生命周期 1、应用程序调用xrCreateSession创建一个Session，需要指定参数：System和渲染API，新创建的Session默认状态是 IDLE。
2、应用程序通过XrEventDataSessionStateChanged监测Session的状态变化。
3、当应用程序准备好呈现XR的内容时，会将Session状态切换到 READY 状态，并通知到应用程序。应用程序准备好渲染内容后，需要调用xrBeginSession，开始渲染循环。</description>
    </item>
    
    <item>
      <title>Hello OpenXR - 第一个OpenXR程序</title>
      <link>http://adiosy.com/posts/00_hello-openxr.html</link>
      <pubDate>Tue, 07 Mar 2023 14:34:07 +0800</pubDate>
      
      <guid>http://adiosy.com/posts/00_hello-openxr.html</guid>
      <description>1 概要 本文目标是实现一个最小化OpenXR应用程序，只渲染一个三角形，渲染库采用的是OpenGL，窗口管理使用GLFW，OpenXR Runtime使用的是Monado。因为Monado目前支持的是安卓和Linux平台，本人测试使用的是Ubuntu系统，所以这个DEMO可以在Ubuntu系统下正常运行，但别的系统还没有经过严格测试。
2 环境准备 点击下载cmake，如果使用apt安装，可能版本号过低。
cd cmake-xxxx sudo apt install -y libssl-dev sudo .</description>
    </item>
    
    <item>
      <title>OpenGL渲染器04_绘制点线面</title>
      <link>http://adiosy.com/posts/opengl_renderer/04_%E7%BB%98%E5%88%B6%E7%82%B9%E7%BA%BF%E9%9D%A2.html</link>
      <pubDate>Mon, 29 Nov 2021 14:34:07 +0800</pubDate>
      
      <guid>http://adiosy.com/posts/opengl_renderer/04_%E7%BB%98%E5%88%B6%E7%82%B9%E7%BA%BF%E9%9D%A2.html</guid>
      <description>回顾 上一篇《OpenGL环境搭建》给接下来的内容创造了基础，我们拥有了glfw提供的窗口，也有了ImGui提供的GUI，接下来就磨刀霍霍向猪羊，准备大干一场。
不过，最开始，我们还只能绘制简单的东西：点、线、三角形和四边形。
目标 各种华丽的二维、三维图形，虚拟现实，都是由点线面基本图元构成的。如果接触过Maya、Blender等建模工具，会发现，模型的基础就是点线面，建模就是构建点线面，然后挤出立体，从而形成三维。
然而最简单的面就是拥有三个顶点的面：三角形。所以目标就是：
绘制点。 绘制线。 绘制三角形。 绘制四边形。 最后介绍一个调试程序RenderDoc，方便图形程序调试，也可以可视化了解渲染管线流程。 渲染管线 上代码之前，先了解了解渲染流程。</description>
    </item>
    
    <item>
      <title>OpenGL渲染器03_OpenGL环境 </title>
      <link>http://adiosy.com/posts/opengl_renderer/03_opengl%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html</link>
      <pubDate>Tue, 23 Nov 2021 14:34:07 +0800</pubDate>
      
      <guid>http://adiosy.com/posts/opengl_renderer/03_opengl%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html</guid>
      <description>目标 原本计划是OpenGL环境就放在上一节（C++环境搭建）中一起记录的，后面发现内容太多了，所以就分开记录。
使用glfw、glad和ImGui完成OpenGL环境的搭建； 创建第一个glfw窗口； 使用ImGui，显示ImGui的demo窗口。 计算机图形学 计算机图形学是使用数学算法将二维或三维图形转化计算机显示的栅格形式的科学，计算机图形学的主要研究内容就是研究如何在计算机中表示图形、以及利用计算机进行图形的计算、处理和显示的相关原理和算法。
——来自百度百科</description>
    </item>
    
    <item>
      <title>OpenGL渲染器02_C&#43;&#43;环境</title>
      <link>http://adiosy.com/posts/opengl_renderer/02_c&#43;&#43;%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html</link>
      <pubDate>Fri, 19 Nov 2021 14:34:07 +0800</pubDate>
      
      <guid>http://adiosy.com/posts/opengl_renderer/02_c&#43;&#43;%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html</guid>
      <description>目标 使用CMake+MinGW搭建C++编译环境。 使用CLion搭建C++开发环境，实现C++程序开发、生成、编译、运行； 构建和编译 C++源码“转译”为机器语言，就是编译过程。最常用的编译器是GNU的C/C++编译器。也就是gcc/g++。
如果我们要编译和运行C++程序，下载安装g++后：
# 编译 g++ -c filename.</description>
    </item>
    
    <item>
      <title>OpenGL渲染器01_开篇</title>
      <link>http://adiosy.com/posts/opengl_renderer/01_%E5%BC%80%E7%AF%87.html</link>
      <pubDate>Thu, 18 Nov 2021 14:34:07 +0800</pubDate>
      
      <guid>http://adiosy.com/posts/opengl_renderer/01_%E5%BC%80%E7%AF%87.html</guid>
      <description>概述 在真正开始之前，我想先说说我的情况，目前我从事软件开发，不过工作上主要语言还是Java。
编程基础，四年Java编程基础；工作上没用到C++，不过自己业余学习和使用C++大概1.5年左右，差不多是用到了才查，断断续续，没有系统性学习。 图形学线性代数基础，目前才了解向量、矩阵的基本运算和变换基础，更高级的还没学。 OpenGL编程的一些基础知识，基础几何绘制、MVP变换、材质、光照等基础。 还有一点WebGL的经验，实现了基础材质和光照。 为什么要写关于图形学的内容呢，缘由悠长。这一段可能会有些啰嗦，可以直接略过。
启蒙 第一次接触计算机，是在2008年的夏天。那时候小学六年级，学校地处西南偏远山区，一位老师要同时教授多门课程。那时候，我们学习也就语文和数学两门科目，另外的一门科学，我记得小升初的时候都没考试，老师讲的也少。剩下就是音体美课程了，因为都是一个老师，音体美很多时候也就当成自习上课。因此，相比现在的孩子小学三年级开始学习英语，那时我们晚了许多，计算机课程更是不可能了。</description>
    </item>
    
    <item>
      <title> OpenGL渲染器00_预览</title>
      <link>http://adiosy.com/posts/opengl_renderer/00_preview.html</link>
      <pubDate>Tue, 16 Nov 2021 14:34:07 +0800</pubDate>
      
      <guid>http://adiosy.com/posts/opengl_renderer/00_preview.html</guid>
      <description> OpenGL基础绘制 环境搭建 编辑器环境 Clion Visio Studio（不深入） 构建环境 Cmake+MinGW glfw glad ImGui Renderdoc调试器 绘制基础几何 VAO、VBO、EBO、GLSL文件 点 线 三角面 glfw事件处理 三维图形 mRender设计 几大对象 类图设计 事件驱动（TODO这个我现在都没想好） 工厂模式创建物体（也没想好，跟实例化物体那边有点关系，就是一次渲染大批量物体，十万百万的） 架构搭建 程序入口 向量和矩阵（不细化，具体在用到时候再写。） 日志、字符串、文件IO、异常等简单实现 Object、Event等父类简单实现 ShaderUtil编译和管理Shaders BufferGeometry Object3D Scene Renderer Camera 绘制简单几何图形 绘制三维图形 物体变换（Model Matrix） obj模型简单读取 线性变换 rotate、scale 仿射变换 线性变换+translate 视图变换 （View Matrix和Projection Matrix） 实现平行相机 实现透视相机 实现多视角 对象拾取 物体实例化 材质和光照 贴图 光照计算 多光源、可配置光照强度 粗糙度、金属度等等参数实现 法线贴图 阴影 阴影其实没想好，还没看这部分的知识 高级内容 立方体贴图 环境贴图、天空盒 蒙皮 雾 文字渲染 粒子、精灵 动画 接下来的还没想好&amp;hellip; </description>
    </item>
    
    <item>
      <title>多层菜单数据查询</title>
      <link>http://adiosy.com/posts/%E5%A4%9A%E5%B1%82%E8%8F%9C%E5%8D%95%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2.html</link>
      <pubDate>Fri, 06 Jul 2018 14:34:07 +0800</pubDate>
      
      <guid>http://adiosy.com/posts/%E5%A4%9A%E5%B1%82%E8%8F%9C%E5%8D%95%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2.html</guid>
      <description>在9月份面试时，面试官在一张草稿纸上出了一道省市县联动的题目，并提示我可以使用递归或循环，将数据查询出来封装到对象中。当时我用了循环的方式将其封装，虽说勉强实现，但是代码冗余度高，逻辑性特别差。
碰巧最近项目中业务需要，也是将多级菜单封装到根菜单返回给前端，发现还是会把自己弄得头晕，因此打算认真写一下，当做笔记，也对之前Hibernate,Mybatis框架的复习。下面将会使用Mybatis 和 JPA 分别实现菜单封装业务逻辑，初步规划只要将数据以JSON格式写回前端即是测试通过。
使用Mybatis 数据库表一览
menuid menuname parentid 0 系统菜单 100 二级菜单A 0 101 三级菜单A 100 102 三级菜单A 100 200 二级菜单B 0 201 三级菜单B 200 202 三级菜单B 200 根据数据库表编写菜单实体类</description>
    </item>
    
    <item>
      <title>基于Apache james实现的Java邮件服务器</title>
      <link>http://adiosy.com/posts/%E9%82%AE%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8.html</link>
      <pubDate>Tue, 02 Jan 2018 14:34:07 +0800</pubDate>
      
      <guid>http://adiosy.com/posts/%E9%82%AE%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8.html</guid>
      <description>什么是邮件服务器 邮件服务器是一种用来负责电子邮件收发管理的设备，而邮件服务就是责邮件的收信和发信功能，其最主要有pop和smtp两个协议。关于这两个协议，有着很多的知识点涵盖其中，这里不过多介绍。下面是我接触过的两个可以实现邮件服务的解决方案。
易邮邮件服务 在windows系统下，可以使用 易邮邮件服务 ，这个服务器简单而且实用，用在平时开发，测试或者局域网间的邮件收发还是挺方便的，不过我没有找到官方的，可以将易邮邮件服务安装在Linux的相关资料，因此不使用这个。这是易邮邮件服务的官方网站地址: https://www.eyousoft.net/
Apache james Apache 应该都不陌生，开源免费，对于我们开发者来说是最好的家园。当时我项目需要时，一直在找邮件服务相关资料，于是找到了它。Apache James相关资料不多，所以希望写篇博客将其记录。以备以后用到，也对邮件服务能够有更深入的理解。这是官方的介绍</description>
    </item>
    
    <item>
      <title>Linux下安装Nginx</title>
      <link>http://adiosy.com/posts/linux%E4%B8%8B%E5%AE%89%E8%A3%85nginx.html</link>
      <pubDate>Mon, 18 Dec 2017 14:34:07 +0800</pubDate>
      
      <guid>http://adiosy.com/posts/linux%E4%B8%8B%E5%AE%89%E8%A3%85nginx.html</guid>
      <description>介绍 Nginx(&amp;ldquo;engine x&amp;rdquo;)是一款是由俄罗斯的程序设计师Igor Sysoev所开发高性能的 Web和 反向代理 服务器，也是一个 IMAP/POP3/SMTP 代理服务器。在高连接并发的情况下，Nginx是Apache服务器不错的替代品。</description>
    </item>
    
    <item>
      <title>Liunx下的JDK和MySQL安装</title>
      <link>http://adiosy.com/posts/liunx%E4%B8%8B%E7%9A%84jdk%E5%92%8Cmysql%E5%AE%89%E8%A3%85.html</link>
      <pubDate>Sat, 16 Dec 2017 14:34:07 +0800</pubDate>
      
      <guid>http://adiosy.com/posts/liunx%E4%B8%8B%E7%9A%84jdk%E5%92%8Cmysql%E5%AE%89%E8%A3%85.html</guid>
      <description>准备工作 本次环境配置中，安装的主要环境有：JDK , MySQL
我的服务器环境版本：
Linx ： CentOS 6.</description>
    </item>
    
    <item>
      <title>Springboot和JPA搭建demo</title>
      <link>http://adiosy.com/posts/springboot%E5%92%8Cjpa%E6%90%AD%E5%BB%BAdemo.html</link>
      <pubDate>Sat, 25 Nov 2017 14:34:07 +0800</pubDate>
      
      <guid>http://adiosy.com/posts/springboot%E5%92%8Cjpa%E6%90%AD%E5%BB%BAdemo.html</guid>
      <description>在项目的技术选型中，持久层框架常用的有Hibernate/JPA/Mybatis和原生JDBC等等，虽然之前特别喜欢JPA的简洁强大，但是在一些项目上还是必须得使用Mybatis这个小巧，面向SQL的持久层框架，结合Springboot，将之前的技术融合到新技术中，所以写了这个测试demo，该测试只单独写了持久层，不包含web和业务层代码，即整合了springboot和mybatis后，再加一个单元测试。
测试一 「完全注解形式」 1.pom.xml 配置文件中引入 mybatis-spring-boot-starter ，支持mybatis相关
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.</description>
    </item>
    
  </channel>
</rss>
